{"version":3,"sources":["webpack:///./src/app/classes/cardio-info.ts","webpack:///./src/app/classes/cardio-types.enum.ts","webpack:///./src/app/classes/exercise.ts","webpack:///./src/app/classes/my-try-types.enum.ts","webpack:///./src/app/classes/my-try.ts","webpack:///./src/app/classes/training.ts","webpack:///./src/app/pages/training/cardio-try/cardio-try.component.html","webpack:///./src/app/pages/training/cardio-try/cardio-try.component.scss","webpack:///./src/app/pages/training/cardio-try/cardio-try.component.ts","webpack:///./src/app/pages/training/my-stretching/my-stretching.component.html","webpack:///./src/app/pages/training/my-stretching/my-stretching.component.scss","webpack:///./src/app/pages/training/my-stretching/my-stretching.component.ts","webpack:///./src/app/pages/training/my-try/my-try.component.html","webpack:///./src/app/pages/training/my-try/my-try.component.scss","webpack:///./src/app/pages/training/my-try/my-try.component.ts","webpack:///./src/app/pages/training/my-warm/my-warm.component.html","webpack:///./src/app/pages/training/my-warm/my-warm.component.scss","webpack:///./src/app/pages/training/my-warm/my-warm.component.ts","webpack:///./src/app/pages/training/programs-complex/programs-complex.component.html","webpack:///./src/app/pages/training/programs-complex/programs-complex.component.scss","webpack:///./src/app/pages/training/programs-complex/programs-complex.component.ts","webpack:///./src/app/pages/training/trainig/trainig.component.html","webpack:///./src/app/pages/training/trainig/trainig.component.scss","webpack:///./src/app/pages/training/trainig/trainig.component.ts","webpack:///./src/app/pages/training/training-routing.module.ts","webpack:///./src/app/pages/training/training.module.ts","webpack:///./src/app/services/programs.service.ts","webpack:///./src/app/sport-common/dialog-info.service.ts"],"names":[],"mappings":"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","file":"app-pages-training-training-module.js","sourcesContent":["import { Mappable } from './mappable';\r\nimport { CardioTypes, CardioTypesHB } from './cardio-types.enum';\r\n\r\nexport class CardioInfo extends Mappable {\r\n    private _cardioType: CardioTypes = CardioTypes.RUNNING;\r\n    private _averagePulse: number;\r\n    private _averageSpeed: number;\r\n    private _time: number = 0; // in seconds\r\n\r\n    public get cardioType(): CardioTypes {\r\n        return this._cardioType;\r\n    }\r\n    public set cardioType(value: CardioTypes) {\r\n        this._cardioType = value;\r\n    }\r\n\r\n    public get averagePulse(): number {\r\n        return this._averagePulse;\r\n    }\r\n    public set averagePulse(value: number) {\r\n        this._averagePulse = value;\r\n    }\r\n\r\n    public get averageSpeed(): number {\r\n        return this._averageSpeed;\r\n    }\r\n    public set averageSpeed(value: number) {\r\n        this._averageSpeed = value;\r\n    }\r\n\r\n    public get time(): number {\r\n        return this._time;\r\n    }\r\n    public set time(value: number) {\r\n        this._time = value;\r\n    }\r\n\r\n    get isCompleted() {\r\n        return this.time;\r\n    }\r\n    set isCompleted(value: any) {}\r\n\r\n    get typeName() {\r\n        const finded = CardioTypesHB.find( ({sysname}) => sysname === this.cardioType);\r\n        return finded && finded.name || '';\r\n    }\r\n    set typeName(value) {}\r\n\r\n    constructor(data?: any) {\r\n        super(data);\r\n        if (data) {\r\n            Object.assign(this, data);\r\n        }\r\n    }\r\n}\r\n","export enum CardioTypes {\n    RUNNING = 1,\n    WALK,\n    STEPPER,\n    ELLIPSE,\n    BICYCLE,\n    WORKOUT\n}\n\nexport const CardioTypesHB = [\n    {sysname: CardioTypes.RUNNING, name: 'Бег'},\n    {sysname: CardioTypes.WALK, name: 'Ходьба'},\n    {sysname: CardioTypes.STEPPER, name: 'STEPPER'},\n    {sysname: CardioTypes.ELLIPSE, name: 'ELLIPSE'},\n    {sysname: CardioTypes.BICYCLE, name: 'BICYCLE'},\n    {sysname: CardioTypes.WORKOUT, name: 'Свободный вес'}\n];","import { ProtoExercise } from './proto-exercise';\r\nimport { MyTry } from './my-try';\r\nimport { Mappable } from './mappable';\r\n\r\nexport class Exercise extends Mappable {\r\n    private _protoLink: ProtoExercise;\r\n    private _tryes: MyTry[] = [];\r\n    private _comment: string;\r\n\r\n    public get protoLink(): ProtoExercise {\r\n        return this._protoLink;\r\n    }\r\n    public set protoLink(value: ProtoExercise) {\r\n        this._protoLink = value;\r\n    }\r\n\r\n    public get tryes(): MyTry[] {\r\n        return this._tryes;\r\n    }\r\n    public set tryes(value: MyTry[]) {\r\n        this._tryes = value;\r\n    }\r\n\r\n    public get comment(): string {\r\n        return this._comment;\r\n    }\r\n    public set comment(value: string) {\r\n        this._comment = value;\r\n    }\r\n\r\n    get name() { return this.protoLink.name; }\r\n    set name(value: any) {}\r\n\r\n    get description() { return this.protoLink.description; }\r\n    set description(value: any) {}\r\n\r\n    get isCompleted() { return this.tryes.length > 0;} // Упражнение считается выполненным, если есть хоть 1 подход\r\n    set isCompleted(value: any) {}\r\n\r\n    haveNotEmprtyTryes() {\r\n        let notEmpty = false;\r\n        this.tryes.map((el: MyTry) => notEmpty = notEmpty || !el.isEmpty());\r\n        return notEmpty;\r\n    }\r\n\r\n    constructor(data?: any) {\r\n        super(data);\r\n        if (data) {\r\n            Object.assign(this, data);\r\n\r\n            if (data['protoLink']) {\r\n                this.protoLink = new ProtoExercise(data['protoLink']);\r\n            }\r\n\r\n            if (data['tryes']) {\r\n                this.tryes = data['tryes'].map(el => new MyTry(el));\r\n            } \r\n        }\r\n    }\r\n}\r\n","export enum MyTryTypes {\n    POWER=1,\n    INTERVAL,\n    ROTATION,\n}\n","import { MyTryTypes } from './my-try-types.enum';\r\nimport { Mappable } from './mappable';\r\n\r\nexport class MyTry extends Mappable {\r\n    private _type: MyTryTypes = MyTryTypes.POWER;\r\n    private _weight: number;\r\n    private _repeatCount: number;\r\n    private _index: number;\r\n\r\n    public get type(): MyTryTypes {\r\n        return this._type;\r\n    }\r\n    public set type(value: MyTryTypes) {\r\n        this._type = value;\r\n    }\r\n\r\n    public get weight(): number {\r\n        return this._weight;\r\n    }\r\n    public set weight(value: number) {\r\n        this._weight = value;\r\n    }\r\n\r\n    public get repeatCount(): number {\r\n        return this._repeatCount;\r\n    }\r\n    public set repeatCount(value: number) {\r\n        this._repeatCount = value;\r\n    }\r\n\r\n    public get index(): number {\r\n        return this._index;\r\n    }\r\n    public set index(value: number) {\r\n        this._index = value;\r\n    }\r\n\r\n    isEmpty() {\r\n        return !this._repeatCount || this._repeatCount <= 0;\r\n    }\r\n\r\n    constructor(data?: any) {\r\n        super(data);\r\n        if (data) {\r\n            Object.assign(this, data);\r\n        }\r\n    }\r\n}\r\n","import { Exercise } from './exercise';\r\nimport { Mappable } from './mappable';\r\nimport { CardioInfo } from './cardio-info';\r\nimport { ProtoTraining } from './proto-training';\r\nimport { ProtoExercise } from './proto-exercise';\r\n\r\nexport class Training extends Mappable {\r\n    private _id: string;\r\n    private _protoTrainig: ProtoTraining;\r\n    private _exercises: Exercise[] = [];\r\n    private _date: number;\r\n    private _userWeight: number;\r\n    private _cardioStart: CardioInfo;\r\n    private _cardioEnd: CardioInfo;\r\n    private _comment: string;\r\n    private _isCompleted: boolean = false; // Определет, что тренировка завершена, значит её можно использовать для анализа\r\n\r\n    public get id(): string {\r\n        return this._id;\r\n    }\r\n    public set id(value: string) {\r\n        this._id = value;\r\n    }\r\n\r\n    public get protoTrainig(): ProtoTraining {\r\n        return this._protoTrainig;\r\n    }\r\n    public set protoTrainig(value: ProtoTraining) {\r\n        this._protoTrainig = value;\r\n    }\r\n\r\n    public get exercises(): Exercise[] {\r\n        return this._exercises;\r\n    }\r\n    public set exercises(value: Exercise[]) {\r\n        this._exercises = value;\r\n    }\r\n\r\n    public get date(): number {\r\n        return this._date;\r\n    }\r\n    public set date(value: number) {\r\n        this._date = value;\r\n    }\r\n\r\n    public get userWeight(): number {\r\n        return this._userWeight;\r\n    }\r\n    public set userWeight(value: number) {\r\n        this._userWeight = value;\r\n    }\r\n\r\n    public get cardioStart(): CardioInfo {\r\n        return this._cardioStart;\r\n    }\r\n    public set cardioStart(value: CardioInfo) {\r\n        this._cardioStart = value;\r\n    }\r\n\r\n    public get cardioEnd(): CardioInfo {\r\n        return this._cardioEnd;\r\n    }\r\n    public set cardioEnd(value: CardioInfo) {\r\n        this._cardioEnd = value;\r\n    }\r\n\r\n    public get comment(): string {\r\n        return this._comment;\r\n    }\r\n    public set comment(value: string) {\r\n        this._comment = value;\r\n    }\r\n\r\n    public get isCompleted(): boolean {\r\n        return this._isCompleted;\r\n    }\r\n    public set isCompleted(value: boolean) {\r\n        this._isCompleted = value;\r\n    }\r\n\r\n    get canComplete() {\r\n        // Нужно, чтобы были выполнены все упражнения\r\n        if (this.protoTrainig.exercises.length === this.exercises.length) {\r\n            for(let i = 0; i < this.exercises.length; i++) {\r\n                if (!this.exercises[i].isCompleted) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        // Минимум 1 кардио\r\n        if (!(this.cardioEnd.isCompleted || this.cardioStart.isCompleted)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    set canComplete(value: any) {}\r\n\r\n    constructor(data?: any) {\r\n        super(data);\r\n        if (data) {\r\n            Object.assign(this, data);\r\n\r\n            if (data['cardioStart']) {\r\n                this.cardioStart = new CardioInfo(data['cardioStart']);\r\n            }\r\n            if (data['cardioEnd']) {\r\n                this.cardioEnd = new CardioInfo(data['cardioEnd']);\r\n            }\r\n\r\n            if (data['exercises']) {\r\n                this.exercises = data['exercises'].map(el => new Exercise(el));\r\n            }\r\n        }\r\n    }\r\n\r\n    init() {\r\n        this.cardioStart = new CardioInfo();\r\n        this.cardioEnd = new CardioInfo();\r\n        this.exercises = this.protoTrainig.exercises.map((exer: ProtoExercise) => new Exercise({protoLink: exer}));\r\n    }\r\n\r\n    getExercise(protoExercise) {\r\n        return this.exercises.find(ex => ex.protoLink.id === protoExercise.id);\r\n    }\r\n\r\n    getExercises(protoExercise) {\r\n        return this.exercises.filter(ex => ex.protoLink.id === protoExercise.id);\r\n    }\r\n\r\n    // public toMap(obj: any = this): any {\r\n    // }\r\n\r\n\r\n}\r\n","module.exports = \"<div class=\\\"row-flex\\\">\\r\\n  <mat-form-field class=\\\"col-6\\\">\\r\\n    <mat-label>Тип Кардио</mat-label>\\r\\n    <mat-select #cardioType [(value)]=\\\"namespace.cardioType\\\">\\r\\n      <ng-container *ngFor=\\\"let cardioType of CardioTypesHB\\\">\\r\\n        <mat-option [value]=\\\"cardioType.sysname\\\">{{ cardioType.name }}</mat-option>\\r\\n      </ng-container>\\r\\n    </mat-select>\\r\\n  </mat-form-field>\\r\\n    \\r\\n  <mat-form-field class=\\\"col-6\\\">\\r\\n      <input matInput type=\\\"number\\\" min=\\\"0\\\" max=\\\"50\\\" placeholder=\\\"averageSpeed\\\" name=\\\"averageSpeed\\\" [(ngModel)]=\\\"namespace.averageSpeed\\\">\\r\\n  </mat-form-field>\\r\\n  \\r\\n  <!-- <mat-form-field class=\\\"col-6\\\">\\r\\n      <input matInput type=\\\"number\\\" min=\\\"0\\\" max=\\\"50\\\" placeholder=\\\"averagePulse\\\" name=\\\"averagePulse\\\" [(ngModel)]=\\\"namespace.averagePulse\\\">\\r\\n  </mat-form-field> -->\\r\\n\\r\\n  \\r\\n</div>\\r\\n<div class=\\\"row-flex row-flex-center\\\">\\r\\n    <mat-form-field class=\\\"col-6\\\">\\r\\n      <input matInput [disabled]=\\\"timerIsActive\\\" type=\\\"time\\\" placeholder=\\\"time\\\" name=\\\"time\\\" [(ngModel)]=\\\"viewedTime\\\">\\r\\n    </mat-form-field>\\r\\n    <div class=\\\"col-6\\\">\\r\\n        <button mat-fab color=\\\"accent\\\" (click)=\\\"startStopClick()\\\" class=\\\"to-right-btn\\\"> \\r\\n            <mat-icon>{{ timerIsActive ? 'pause' : 'play_arrow' }}</mat-icon>\\r\\n        </button>\\r\\n    </div>\\r\\n  \\r\\n</div>\"","module.exports = \".to-right-btn {\\n  float: right; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvdHJhaW5pbmcvY2FyZGlvLXRyeS9DOlxccHJvamVjdHNcXFNwb3J0UHV6emxlL3NyY1xcYXBwXFxwYWdlc1xcdHJhaW5pbmdcXGNhcmRpby10cnlcXGNhcmRpby10cnkuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxZQUFZLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy90cmFpbmluZy9jYXJkaW8tdHJ5L2NhcmRpby10cnkuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIudG8tcmlnaHQtYnRuIHtcclxuICAgIGZsb2F0OiByaWdodDtcclxufSJdfQ== */\"","import { Component, OnInit, Input } from '@angular/core';\r\nimport { CardioInfo } from 'src/app/classes/cardio-info';\r\nimport { CardioTypesHB } from 'src/app/classes/cardio-types.enum';\r\n\r\n@Component({\r\n  selector: 'app-cardio-try',\r\n  templateUrl: './cardio-try.component.html',\r\n  styleUrls: ['./cardio-try.component.scss']\r\n})\r\nexport class CardioTryComponent implements OnInit {\r\n\r\n  @Input() namespace: CardioInfo;\r\n  CardioTypesHB = CardioTypesHB;\r\n\r\n  private timeStart: number;\r\n  private timerIsActive: boolean = false;\r\n  protected timeToView: string = '00:00';\r\n  protected timer: any;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    this.setViewTimer();\r\n  }\r\n\r\n  setViewTimer() {\r\n    const totalSeconds = Math.floor(this.namespace.time + this.getTime() / 1000.);\r\n    const seconds = totalSeconds % 60;\r\n    const minutes = Math.floor(totalSeconds / 60.);\r\n    this.timeToView = `${('0' + minutes).slice(-2)}:${('0' + seconds).slice(-2)}`;\r\n  }\r\n\r\n  get viewedTime() {\r\n    return this.timeToView;\r\n  }\r\n\r\n  set viewedTime(value) {\r\n    const [minutes, secs] = value.split(':').map(x => +x);\r\n    this.namespace.time = minutes * 60 + secs;\r\n  }\r\n\r\n  getTime() {\r\n    return this.timerIsActive ? new Date().getTime() - this.timeStart : 0;\r\n  }\r\n\r\n  stop() {\r\n    if (!this.timerIsActive) return;\r\n    const timeLost = Math.floor(this.getTime() / 1000.);;\r\n    this.timerIsActive = false;\r\n    clearInterval(this.timer);\r\n    this.namespace.time += timeLost;\r\n  }\r\n\r\n  start() {\r\n    if (this.timerIsActive) return;\r\n    this.timerIsActive = true;\r\n    this.timeStart = new Date().getTime();\r\n    this.timer = setInterval(() => this.setViewTimer(), 1000);\r\n  }\r\n\r\n  startStopClick() {\r\n    if (this.timerIsActive) {\r\n      this.stop();\r\n    } else {\r\n      this.start();\r\n    }\r\n  }\r\n}\r\n","module.exports = \"<p>\\n  my-stretching works!\\n</p>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3RyYWluaW5nL215LXN0cmV0Y2hpbmcvbXktc3RyZXRjaGluZy5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-my-stretching',\n  templateUrl: './my-stretching.component.html',\n  styleUrls: ['./my-stretching.component.scss']\n})\nexport class MyStretchingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\r\\n<div class=\\\"row\\\">\\r\\n    <!-- <mat-form-field class=\\\"col-2\\\"> -->\\r\\n        <!-- <input matInput disabled type=\\\"number\\\" min=\\\"0\\\" max=\\\"200\\\" placeholder=\\\"Number\\\" name=\\\"index\\\" [(ngModel)]=\\\"namespace.index\\\"> -->\\r\\n        \\r\\n    <!-- </mat-form-field> -->\\r\\n    <div class=\\\"col-2 vert-align\\\">\\r\\n        <span class=\\\"mat-title sub-header\\\">{{ namespace.index }}</span>\\r\\n    </div>\\r\\n    <mat-form-field class=\\\"col-5\\\">\\r\\n        <input matInput type=\\\"number\\\" min=\\\"0\\\" max=\\\"200\\\" placeholder=\\\"weight, kg\\\" name=\\\"weight\\\" [(ngModel)]=\\\"namespace.weight\\\">\\r\\n        <button mat-button *ngIf=\\\"namespace.weight\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"namespace.weight=''\\\">\\r\\n            <mat-icon>close</mat-icon>\\r\\n        </button>\\r\\n    </mat-form-field>\\r\\n    \\r\\n    <mat-form-field class=\\\"col-5\\\">\\r\\n        <input matInput type=\\\"number\\\" min=\\\"0\\\" max=\\\"200\\\" placeholder=\\\"repeatCount\\\" name=\\\"repeatCount\\\" [(ngModel)]=\\\"namespace.repeatCount\\\">\\r\\n        <button mat-button *ngIf=\\\"namespace.repeatCount\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"namespace.repeatCount=''\\\">\\r\\n            <mat-icon>close</mat-icon>\\r\\n        </button>\\r\\n    </mat-form-field>\\r\\n</div>\\r\\n\"","module.exports = \".vert-align {\\n  display: flex;\\n  align-items: flex-end; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvdHJhaW5pbmcvbXktdHJ5L0M6XFxwcm9qZWN0c1xcU3BvcnRQdXp6bGUvc3JjXFxhcHBcXHBhZ2VzXFx0cmFpbmluZ1xcbXktdHJ5XFxteS10cnkuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFDSSxhQUFhO0VBQ2IscUJBQXFCLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy90cmFpbmluZy9teS10cnkvbXktdHJ5LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi52ZXJ0LWFsaWduIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogZmxleC1lbmQ7O1xyXG59Il19 */\"","import { Component, OnInit, Input } from '@angular/core';\r\nimport { MyTry } from 'src/app/classes/my-try';\r\n\r\n@Component({\r\n  selector: 'app-my-try',\r\n  templateUrl: './my-try.component.html',\r\n  styleUrls: ['./my-try.component.scss']\r\n})\r\nexport class MyTryComponent implements OnInit {\r\n\r\n  @Input() namespace: MyTry;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"<p>\\n  my-warm works!\\n</p>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3RyYWluaW5nL215LXdhcm0vbXktd2FybS5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-my-warm',\n  templateUrl: './my-warm.component.html',\n  styleUrls: ['./my-warm.component.scss']\n})\nexport class MyWarmComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\r\\n\\r\\n<ng-container *ngFor=\\\"let complex of programComplexes; let last = last\\\">\\r\\n  <mat-expansion-panel>\\r\\n\\r\\n    <mat-expansion-panel-header>\\r\\n      <mat-panel-title>\\r\\n        {{complex.name}}\\r\\n      </mat-panel-title>\\r\\n      <mat-panel-description>\\r\\n      </mat-panel-description>\\r\\n    </mat-expansion-panel-header>\\r\\n    {{ complex.comment }}\\r\\n    <mat-list role=\\\"list\\\">\\r\\n        <ng-container *ngFor=\\\"let trainig of complex.protoTrainigs; let last = last\\\">\\r\\n            <mat-list-item \\r\\n              (click)=\\\"trainigClick(trainig.id)\\\"\\r\\n              role=\\\"listitem\\\"\\r\\n            >\\r\\n            {{ trainig.name }}\\r\\n            </mat-list-item>\\r\\n            <mat-divider *ngIf=\\\"!last\\\"></mat-divider>\\r\\n        </ng-container>\\r\\n    </mat-list>\\r\\n\\r\\n  </mat-expansion-panel>\\r\\n  <mat-divider *ngIf=\\\"!last\\\"></mat-divider>\\r\\n</ng-container>\\r\\n\\r\\n\\r\\n\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3RyYWluaW5nL3Byb2dyYW1zLWNvbXBsZXgvcHJvZ3JhbXMtY29tcGxleC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { ProgramsService } from 'src/app/services/programs.service';\r\nimport { ProgramComplex } from 'src/app/classes/program-complex';\r\nimport { Router } from '@angular/router';\r\nimport { FlatTreeControl, NestedTreeControl } from '@angular/cdk/tree';\r\nimport { MatTreeFlattener, MatTreeFlatDataSource, MatTreeNestedDataSource } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'app-programs-complex',\r\n  templateUrl: './programs-complex.component.html',\r\n  styleUrls: ['./programs-complex.component.scss']\r\n})\r\nexport class ProgramsComplexComponent implements OnInit {\r\n\r\n  programComplexes: ProgramComplex[] = [];\r\n\r\n  constructor(private programsService: ProgramsService, private router: Router) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.programsService.getProgramComplex().subscribe(res => {\r\n      this.programComplexes = res.programComplexes;\r\n      console.log(this.programComplexes);\r\n    });\r\n  }\r\n\r\n  trainigClick(trainigId: string) {\r\n    console.log('trainigClick::', trainigId);\r\n    this.router.navigate(['/trainig', trainigId]);\r\n  }\r\n\r\n}\r\n","module.exports = \"\\r\\n\\r\\n<mat-divider></mat-divider>\\r\\n<!-- <mat-toolbar>\\r\\n  <button (click)=\\\"showDebug()\\\">Отобразить инфу!</button>\\r\\n\\r\\n</mat-toolbar> -->\\r\\n<mat-divider></mat-divider>\\r\\n<form ngForm #f *ngIf=\\\"trainig\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <mat-form-field class=\\\"col-6 col-md-6\\\">\\r\\n        <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Дата тренеровки\\\"\\r\\n          name=\\\"trainingDate\\\" \\r\\n          [value]=\\\"getTrainigDate()\\\"\\r\\n          (dateChange)=\\\"setTrainigDate($event)\\\"\\r\\n          (dateInput)=\\\"setTrainigDate($event)\\\"\\r\\n        >\\r\\n        <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n        <mat-datepicker #picker></mat-datepicker>\\r\\n      </mat-form-field>\\r\\n\\r\\n      <mat-form-field class=\\\"col-6 col-md-6\\\">\\r\\n          <input matInput type=\\\"number\\\" min=\\\"30\\\" max=\\\"150\\\" placeholder=\\\"Вес\\\" name=\\\"userWeight\\\" [(ngModel)]=\\\"trainig.userWeight\\\">\\r\\n      </mat-form-field>\\r\\n    </div>\\r\\n  </div>\\r\\n  <mat-divider></mat-divider>\\r\\n\\r\\n  <!-- <div class=\\\"container\\\">\\r\\n    <span class=\\\"mat-h3\\\">Стартовое кардио</span>\\r\\n  </div>\\r\\n  <mat-divider></mat-divider>\\r\\n\\r\\n  <div class=\\\"container\\\">\\r\\n    <span class=\\\"mat-h3\\\">Разминка</span>\\r\\n  </div>\\r\\n  <mat-divider></mat-divider> -->\\r\\n\\r\\n  <div class=\\\"container\\\">\\r\\n    \\r\\n    <mat-vertical-stepper [linear]=\\\"false\\\" #stepper\\r\\n    (selectionChange)=\\\"cardioStart.stop(); cardioEnd.stop(); changeSelection($event);\\\"\\r\\n    >\\r\\n\\r\\n        <mat-step>\\r\\n            <ng-template matStepLabel \\r\\n                matStepLabel[completed]=\\\"true\\\"\\r\\n              >Стартовое кардио</ng-template>\\r\\n            \\r\\n            <app-cardio-try #cardioStart\\r\\n              [namespace]=\\\"trainig.cardioStart\\\"\\r\\n            ></app-cardio-try>\\r\\n\\r\\n            \\r\\n            <!-- Кнопки -->\\r\\n            <div class=\\\"row btns-row solo-btn\\\">\\r\\n                <button mat-fab matStepperNext color=\\\"primary\\\">\\r\\n                    <mat-icon>arrow_forward</mat-icon>\\r\\n                </button>\\r\\n              </div>\\r\\n        </mat-step>\\r\\n    \\r\\n        <mat-step>\\r\\n            <ng-template matStepLabel>Разминка</ng-template>\\r\\n            <app-my-warm></app-my-warm>\\r\\n            <div>\\r\\n              <button mat-raised-button matStepperNext color=\\\"primary\\\">Next</button>\\r\\n            </div>\\r\\n        </mat-step>\\r\\n\\r\\n        <!-- УПРАЖНЕНИЯ -->\\r\\n        <ng-container *ngFor=\\\"let protoExercise of protoTrainig.exercises; let last = last; \\\">\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>\\r\\n                    <div class=\\\"exercise-label-wrapper\\\">\\r\\n                      <div class=\\\"exercise-label-name\\\">{{ protoExercise.name }}</div>\\r\\n                      \\r\\n                      <div class=\\\"exercise-label-icons\\\">\\r\\n                          <button mat-icon-button\\r\\n                                  *ngIf=\\\"protoExercise.description\\\"\\r\\n                                  (click)=\\\"openHelpDialogExercise(protoExercise, $event);\\\"\\r\\n                          >\\r\\n                              <mat-icon>error_outline</mat-icon>\\r\\n                          </button>\\r\\n                          <button mat-icon-button\\r\\n                                  *ngIf=\\\"protoExercise.videoLink\\\"\\r\\n                                  (click)=\\\"openVideoLinkExercise(protoExercise, $event)\\\">\\r\\n                              <mat-icon>videocam</mat-icon>\\r\\n                          </button>\\r\\n                          <!-- <button mat-icon-button>\\r\\n                              <mat-icon>find_replace</mat-icon>\\r\\n                          </button> -->\\r\\n                      </div>\\r\\n\\r\\n                    </div>\\r\\n                </ng-template>\\r\\n\\r\\n                <div class=\\\"row\\\">\\r\\n                  <div class=\\\"col-12 sub-header\\\" innerHTML=\\\"{{ getPrevExercise(protoExercise) }}\\\">\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n                <!-- список подходов, кнопка добавления подхода. По завершению этого - нужно убрать пустые подходы -->\\r\\n                <div class=\\\"row\\\">\\r\\n                  <ng-container *ngFor=\\\"let oneTry of getTryesByProtoExercise(protoExercise); let index = index;\\\">\\r\\n                    <app-my-try \\r\\n                      [namespace]=\\\"oneTry\\\"\\r\\n                    ></app-my-try>\\r\\n                  </ng-container>\\r\\n                </div>  \\r\\n        \\r\\n                <!-- Кнопки -->\\r\\n                <div class=\\\"row btns-row\\\">\\r\\n                  <button mat-fab color=\\\"basic\\\" class=\\\"add-try-btn\\\"\\r\\n                    (click)=\\\"addNewTry(protoExercise)\\\"\\r\\n                  >\\r\\n                    <mat-icon>add</mat-icon>\\r\\n                  </button>\\r\\n\\r\\n                  <!-- <button mat-fab color=\\\"primary\\\" (click)=\\\"add_comment = true;\\\">\\r\\n                    <mat-icon>add_comment</mat-icon>\\r\\n                  </button> -->\\r\\n                \\r\\n                  <button mat-fab matStepperNext color=\\\"primary\\\">\\r\\n                      <mat-icon>arrow_forward</mat-icon>\\r\\n                  </button>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n        </ng-container>\\r\\n\\r\\n        <mat-step>\\r\\n            <ng-template matStepLabel>Растяжка</ng-template>\\r\\n            <app-my-stretching></app-my-stretching>\\r\\n            <div>\\r\\n              <button mat-raised-button matStepperNext color=\\\"primary\\\">Next</button>\\r\\n            </div>\\r\\n        </mat-step>\\r\\n\\r\\n        <mat-step>\\r\\n            <ng-template matStepLabel>Финальное кардио</ng-template>\\r\\n\\r\\n            <app-cardio-try #cardioEnd\\r\\n              [namespace]=\\\"trainig.cardioEnd\\\"\\r\\n            ></app-cardio-try>\\r\\n           \\r\\n        </mat-step>\\r\\n\\r\\n      </mat-vertical-stepper>\\r\\n  </div>\\r\\n  <mat-divider></mat-divider>\\r\\n\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <mat-form-field class=\\\"\\\" class=\\\"col-12\\\">\\r\\n        <textarea matInput name=\\\"commentTrainig\\\" placeholder=\\\"Comment to Training\\\" [(ngModel)]=\\\"trainig.comment\\\"></textarea>\\r\\n      </mat-form-field>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"container final-trainig-wrapper\\\">\\r\\n    <div class=\\\"row btns-row solo-btn final\\\">\\r\\n        <button mat-fab color=\\\"basic\\\" class=\\\"green-btn\\\" (click)=\\\"trySave()\\\">\\r\\n            <mat-icon>check</mat-icon>\\r\\n        </button>\\r\\n    </div>\\r\\n  </div>\\r\\n  \\r\\n</form>\"","module.exports = \".exercise-label-wrapper {\\n  display: block; }\\n\\n.exercise-label-name {\\n  text-overflow: ellipsis;\\n  overflow: hidden;\\n  position: absolute;\\n  display: block;\\n  float: left;\\n  width: calc(100% - 135px);\\n  top: 28px; }\\n\\n.exercise-label-icons {\\n  display: block;\\n  position: absolute;\\n  right: 0;\\n  top: 15px; }\\n\\n.btns-row {\\n  display: flex;\\n  justify-content: space-between;\\n  padding: 0 1rem; }\\n\\n.btns-row.solo-btn {\\n    justify-content: flex-end; }\\n\\n.final-trainig-wrapper {\\n  padding: 0.25rem 0; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvdHJhaW5pbmcvdHJhaW5pZy9DOlxccHJvamVjdHNcXFNwb3J0UHV6emxlL3NyY1xcYXBwXFxwYWdlc1xcdHJhaW5pbmdcXHRyYWluaWdcXHRyYWluaWcuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFDSSxjQUFjLEVBQUE7O0FBR2xCO0VBQ0ksdUJBQXVCO0VBQ3ZCLGdCQUFnQjtFQUNoQixrQkFBa0I7RUFDbEIsY0FBYztFQUNkLFdBQVc7RUFDWCx5QkFBeUI7RUFDekIsU0FBUyxFQUFBOztBQUdiO0VBQ0ksY0FBYztFQUNkLGtCQUFrQjtFQUNsQixRQUFRO0VBQ1IsU0FBUyxFQUFBOztBQUliO0VBQ0ksYUFBYTtFQUNiLDhCQUE4QjtFQUM5QixlQUFlLEVBQUE7O0FBSG5CO0lBTVEseUJBQXlCLEVBQUE7O0FBSWpDO0VBQ0ksa0JBQWtCLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy90cmFpbmluZy90cmFpbmlnL3RyYWluaWcuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLmV4ZXJjaXNlLWxhYmVsLXdyYXBwZXIge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbn1cclxuXHJcbi5leGVyY2lzZS1sYWJlbC1uYW1lIHtcclxuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMTM1cHgpO1xyXG4gICAgdG9wOiAyOHB4O1xyXG59XHJcblxyXG4uZXhlcmNpc2UtbGFiZWwtaWNvbnMge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICByaWdodDogMDtcclxuICAgIHRvcDogMTVweDtcclxufVxyXG5cclxuXHJcbi5idG5zLXJvdyB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgcGFkZGluZzogMCAxcmVtO1xyXG5cclxuICAgICYuc29sby1idG4ge1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbi5maW5hbC10cmFpbmlnLXdyYXBwZXIge1xyXG4gICAgcGFkZGluZzogMC4yNXJlbSAwO1xyXG59Il19 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\r\nimport { ProtoTraining } from 'src/app/classes/proto-training';\r\nimport { Training } from 'src/app/classes/training';\r\nimport { ProgramsService } from 'src/app/services/programs.service';\r\nimport { mergeMap, concat, merge, map, filter } from 'rxjs/operators';\r\nimport { MatVerticalStepper, MatDialog } from '@angular/material';\r\nimport { Exercise } from 'src/app/classes/exercise';\r\nimport { ProtoExercise } from 'src/app/classes/proto-exercise';\r\nimport { MyTry } from 'src/app/classes/my-try';\r\nimport { DialogInfoService } from 'src/app/sport-common/dialog-info.service';\r\nimport { forkJoin, of } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-trainig',\r\n  templateUrl: './trainig.component.html',\r\n  styleUrls: ['./trainig.component.scss']\r\n})\r\nexport class TrainigComponent implements OnInit {\r\n\r\n  prevTrainig: Training = null;\r\n  prevExercises: Exercise[] = [];\r\n  protoTrainig: ProtoTraining = null;\r\n  trainig: Training = null;\r\n\r\n  @ViewChild(MatVerticalStepper) stepper: MatVerticalStepper;\r\n\r\n  getTrainigDate() {\r\n    const d = this.trainig.date;\r\n    return d ? new Date(d) : new Date();\r\n  }\r\n\r\n  setTrainigDate(event) {\r\n    const time = event.value && event.value.getTime();\r\n    if (time) {\r\n      this.trainig.date = time;\r\n    }\r\n  }\r\n\r\n  // todo: Сделать сохранение через поток: то есть вызывает next, а оно вызывает saveTrainig()\r\n\r\n  constructor(private route: ActivatedRoute, private router: Router, private programService: ProgramsService, private dialogInfo: DialogInfoService) { }\r\n\r\n  private _createNewTrainig() {\r\n    this.trainig = new Training({\r\n      protoTrainig: this.protoTrainig,\r\n      date: new Date().getTime(),\r\n    });\r\n    this.trainig.init();\r\n    this.programService.adjunctionWithID(this.trainig);\r\n    this.programService.addTrainig(this.trainig);\r\n  }\r\n\r\n  ngOnInit() {\r\n    // todo: реализвать через merge или forkJoin, чтобы все обсёрваблы сразу выполнились\r\n    this.programService.getProgramComplex().pipe(\r\n      mergeMap(() => this.route.paramMap),\r\n      map((params: ParamMap) => {\r\n        this.protoTrainig = this.programService.getProtoTrainigById(params.get('protoid'));\r\n        return this.protoTrainig;\r\n      }),\r\n      mergeMap(() => {\r\n        if (this.protoTrainig) {\r\n          return this.programService.loadTrainigs();\r\n        } else {\r\n          // \r\n          this.openDialog({info: 'Программа не найдена. Попробуйте ещё раз!'}, () => {\r\n            this.router.navigate(['']);\r\n          });\r\n          return of(null);\r\n        }\r\n        }),\r\n        filter((el) => !!el),\r\n    ).subscribe((trainigs: Training[]) => {\r\n      // ищем все тренеровки, которые похожи на эту прото тренеровку\r\n      const asProtoTrainigs = trainigs\r\n        .filter((tr: Training) => tr.protoTrainig.id === this.protoTrainig.id)\r\n        .sort((a: Training, b: Training) => a.date - b.date);\r\n      // console.log('asProtoTrainigs::', asProtoTrainigs);\r\n      // ищем незаконченные тренеровки. Если есть незаконченная, то предлагаем её продолжить, иначе создаём новую\r\n      const nowDate = new Date().getTime();\r\n      const hours12ms = 12 * 60 * 60 * 1000;\r\n      // Последняя незавершённая тренировка, не страше 12 часов\r\n      const findLastNotCompleted = asProtoTrainigs.find((tr: Training) => !tr.isCompleted && (nowDate - tr.date < hours12ms));\r\n\r\n      // Последняя завершённая тренировка\r\n      this.prevTrainig = asProtoTrainigs.find((tr: Training) => tr.isCompleted);\r\n      this.prevExercises = this.prevTrainig && this.prevTrainig.exercises || [];\r\n\r\n      // Если есть последня незавершённая тренировка, то предложить её продолжить\r\n      if (findLastNotCompleted) {\r\n        this.openDialog({\r\n            info: 'Найдена предыдущая незавершённая тренеровка. Продолжить её?',\r\n            btnOk: true\r\n          }, (res) => {\r\n            if (res) {\r\n              this.trainig = findLastNotCompleted;\r\n            } else {\r\n              this._createNewTrainig();\r\n            }\r\n          }\r\n        );\r\n      } else {\r\n        this._createNewTrainig();\r\n      }\r\n    });\r\n  }\r\n\r\n  showDebug() {\r\n    console.log(this.protoTrainig);\r\n    console.log(this.trainig);\r\n    console.log(this.prevTrainig);\r\n  }\r\n\r\n  openDialog(data, callback?): void {\r\n    this.dialogInfo.openDialog(data, (result) => {\r\n      if (callback) {\r\n        callback(result);\r\n      }\r\n    });\r\n  }\r\n\r\n  changeSelection(event) {\r\n    // console.log('changeSelection', event);\r\n    const countStepBeforeExercises = 2;\r\n    const selectedIndex = event.selectedIndex;\r\n    const exerciseIndex = selectedIndex - countStepBeforeExercises;\r\n    if (exerciseIndex >= 0 && selectedIndex < this.protoTrainig.exercises.length + countStepBeforeExercises) {\r\n      const protoExercise = this.protoTrainig.exercises[exerciseIndex];\r\n\r\n      let exercise = this.trainig.getExercise(protoExercise);\r\n      if (!exercise) {\r\n        exercise = new Exercise({\r\n          protoLink: protoExercise\r\n        });\r\n        this.trainig.exercises.push(exercise);\r\n      }\r\n      if (!exercise.tryes.length) {\r\n        this.addNewTry(protoExercise);\r\n      }\r\n    }\r\n\r\n    // Обработка предыдущего поля: удаление не заполненных траев\r\n    const previouslySelectedIndex = event.previouslySelectedIndex - countStepBeforeExercises;\r\n    if (previouslySelectedIndex >= 0 && previouslySelectedIndex < this.protoTrainig.exercises.length + countStepBeforeExercises) {\r\n      const exercise = this.trainig.getExercise(this.protoTrainig.exercises[previouslySelectedIndex]);\r\n      if (exercise) {\r\n        const filtered = exercise.tryes.filter((el: MyTry) => !el.isEmpty());\r\n        exercise.tryes = filtered;\r\n        exercise.tryes.forEach((el: MyTry, index: number) => el.index = index);\r\n      }\r\n    }\r\n\r\n    // Сохраняем текущую тренеровку: \r\n    this.programService.saveTrainig().subscribe();\r\n  }\r\n\r\n  getTryesByProtoExercise(protoExercise: ProtoExercise) {\r\n    const exercise = this.trainig.getExercise(protoExercise);\r\n    return exercise && exercise.tryes || [];\r\n  }\r\n\r\n  getExerciseByProtoExercise(protoExercise: ProtoExercise) {\r\n    return this.trainig.getExercise(protoExercise);\r\n  }\r\n\r\n  addNewTry(protoExercise: ProtoExercise) {\r\n    // console.log('addNewTry::', protoExercise);\r\n    const exercise = this.trainig.getExercise(protoExercise);\r\n    if (!exercise) {\r\n      return;\r\n    }\r\n    \r\n    const nTry = new MyTry();\r\n    nTry.index = exercise.tryes.length;\r\n    exercise.tryes.push(nTry);\r\n  }\r\n\r\n  openHelpDialogExercise(protoExercise: ProtoExercise, event: MouseEvent) {\r\n      console.log('openHelpDialogExercise::', event);\r\n      event.stopPropagation();\r\n      this.openDialog({info: protoExercise.description, title: protoExercise.name});\r\n  }\r\n\r\n  openVideoLinkExercise(protoExercise: ProtoExercise, event: MouseEvent) {\r\n    console.log('openVideoLinkExercise::', protoExercise.videoLink);\r\n    event.stopPropagation();\r\n    window.open(protoExercise.videoLink, '_blank');\r\n  }\r\n\r\n  private _closeTrainig() {\r\n    console.log('Close Trainig');\r\n    this.trainig.isCompleted = true;\r\n    this.programService.saveTrainig().subscribe();\r\n    this.router.navigate(['/']);\r\n  };\r\n\r\n  trySave() {\r\n    // todo: Проверить, всё ли заполнено, если да, то сохранить и перейти назад в навигаторе\r\n    this.showDebug();\r\n    this.programService.saveTrainig().subscribe();\r\n    // console.log('trySave::', this.trainig, this.trainig.canComplete);\r\n    if (!this.trainig.canComplete) {\r\n      this.openDialog({\r\n          info: 'Не все упрежнения выполнены. Завершить тренеровку?',\r\n          btnOk: true\r\n        }, (res) => {\r\n          if (res) {\r\n            this._closeTrainig();\r\n          }\r\n      });\r\n    } else {\r\n      this._closeTrainig();\r\n    }\r\n\r\n  }\r\n\r\n  getPrevExercise(protoExercise) {\r\n    const lastExercise = this.prevExercises.find((ex: Exercise) => ex.protoLink.id === protoExercise.id);\r\n    if (!lastExercise || !lastExercise.haveNotEmprtyTryes()) {\r\n      return '';\r\n    }\r\n    const countExercise = lastExercise.tryes.length;\r\n    const exercises = lastExercise.tryes.map((mtry: MyTry) => `<b>${mtry.weight || 0}</b>/${mtry.repeatCount || 0}`);\r\n    return `${countExercise} [${exercises.join(' - ')}]`;\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ProgramsComplexComponent } from './programs-complex/programs-complex.component';\r\nimport { TrainigComponent } from './trainig/trainig.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ProgramsComplexComponent\r\n  },\r\n  {\r\n    path: 'trainig',\r\n    redirectTo: '',\r\n    pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'trainig/:protoid',\r\n    component: TrainigComponent,\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class TrainingRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { TrainingRoutingModule } from './training-routing.module';\r\nimport { ProgramsComplexComponent } from './programs-complex/programs-complex.component';\r\nimport { MatListModule, MatDividerModule, MatIconModule, MatExpansionModule, MatDatepickerModule,\r\n  MatFormFieldModule,\r\n  MatNativeDateModule,\r\n  MatInputModule,\r\n  MatToolbarModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatStepperModule,\r\n  MatSelectModule,\r\n  MatRippleModule,\r\n  MatDialogModule} from '@angular/material';\r\nimport { TrainigComponent } from './trainig/trainig.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MyTryComponent } from './my-try/my-try.component';\r\nimport { CardioTryComponent } from './cardio-try/cardio-try.component';\r\nimport { MyStretchingComponent } from './my-stretching/my-stretching.component';\r\nimport { MyWarmComponent } from './my-warm/my-warm.component';\r\nimport { SportCommonModule } from 'src/app/sport-common/sport-common.module';\r\n\r\n@NgModule({\r\n  declarations: [ProgramsComplexComponent, TrainigComponent, MyTryComponent, CardioTryComponent, MyStretchingComponent, MyWarmComponent],\r\n  imports: [\r\n    CommonModule,\r\n    TrainingRoutingModule,\r\n\r\n    MatNativeDateModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    FormsModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatListModule,\r\n    MatDividerModule,\r\n    MatStepperModule,\r\n    MatSelectModule,\r\n    MatRippleModule,\r\n    SportCommonModule,\r\n\r\n    MatExpansionModule,\r\n    MatIconModule,\r\n    MatDatepickerModule,\r\n  ],\r\n  exports: [ProgramsComplexComponent, TrainigComponent, MyTryComponent, CardioTryComponent, MyStretchingComponent, MyWarmComponent]\r\n})\r\nexport class TrainingModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { RestService } from './rest.service';\r\nimport { ProgramComplex } from '../classes/program-complex';\r\nimport { Training } from '../classes/training';\r\nimport { ProtoTraining } from '../classes/proto-training';\r\nimport { UserInfoService } from './user-info.service';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProgramsService {\r\n\r\n  private isLoadTrainigsForUser: string = '';\r\n\r\n  get programComplexes(): ProgramComplex[] {\r\n    const user = this.userInfo.user;\r\n    return user && user.programComplexes || [];\r\n  };\r\n  // trainigs: Training[] = [];\r\n  // Старые тренировки + текущая тренировка\r\n  private _trainigs: BehaviorSubject<Training[]> = new BehaviorSubject([]);\r\n  trainigs$: Observable<Training[]> = this._trainigs.asObservable();\r\n\r\n  public get trainigs(): Training[] {\r\n    return this._trainigs.value;\r\n  }\r\n  public set trainigs(value: Training[]) {\r\n    this._trainigs.next(value);\r\n  }\r\n\r\n  addTrainig(trainig) {\r\n    this.trainigs = [...this.trainigs, trainig];\r\n  }\r\n\r\n  constructor(private rest: RestService, private userInfo: UserInfoService) {\r\n    console.log('ProgramsService:: INIT');\r\n    this.getProgramComplex().subscribe();\r\n  }\r\n\r\n  generateId() {\r\n    return (new Date().getTime() + (Math.random() * 100).toFixed(0)).toString();\r\n  }\r\n\r\n  adjunctionWithID(obj: Training | ProgramComplex | ProtoTraining) {\r\n    obj.id = this.generateId();\r\n    return obj.id;\r\n  } \r\n\r\n  getProgramComplex() {\r\n    return this.rest.fakeCall('', {programComplexes: this.programComplexes});\r\n  }\r\n\r\n  private get localStorageUserName() {\r\n    return `user_${this.userInfo.user && this.userInfo.user.id}`;\r\n  }\r\n\r\n  saveTrainig() {\r\n    // localStorage.setItem('whatever', 'something');\r\n    const trainigsString = JSON.stringify(this.trainigs.map((tr: Training) => {\r\n      const m = tr.toMap();\r\n      m['protoTrainig'] = tr.protoTrainig.id;\r\n      // todo: exercises -> to proto exercises_id\r\n      return m;\r\n    }));\r\n\r\n\r\n    // console.log('saveTrainig::', trainigsString);\r\n    localStorage.setItem(this.localStorageUserName, trainigsString);\r\n    return of(true);\r\n  }\r\n\r\n  loadTrainigs() {\r\n    if (this.isLoadTrainigsForUser === (this.userInfo.user && this.userInfo.user.id)) {\r\n      return of(this.trainigs);\r\n    }\r\n    const trainigsString = localStorage.getItem(this.localStorageUserName);\r\n    // console.log('loadTrainigs::', trainigsString);\r\n    this.isLoadTrainigsForUser = this.userInfo.user && this.userInfo.user.id || '';\r\n    if (trainigsString) {\r\n      const trMaps = JSON.parse(trainigsString);\r\n      // console.log('trMaps::', trMaps);\r\n      const trainings = trMaps.map(trM => {\r\n        const protoTraining = this.getProtoTrainigById(trM['protoTrainig']);\r\n        delete trM['protoTrainig'];\r\n        // todo: proto_exercies -> exercises\r\n        // console.log('protoTraining::', protoTraining);\r\n        const tr = new Training(trM);\r\n        tr.protoTrainig = protoTraining;\r\n        return tr;\r\n      });\r\n      // console.log('trainings::', trainings);\r\n      this.trainigs = trainings;\r\n    }\r\n    return of(this.trainigs);\r\n  }\r\n\r\n  getProtoTrainigById(protoId: string) {\r\n    const trainigs = this.programComplexes.reduce(\r\n      (accumulator: any, complex: ProgramComplex) => [...accumulator, ...complex.protoTrainigs],\r\n      []\r\n    );\r\n\r\n    return trainigs.find((tr: ProtoTraining) => tr.id === protoId);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { InfoDialogComponent } from './info-dialog/info-dialog.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DialogInfoService {\n\n  constructor(public dialog: MatDialog) { }\n\n  openDialog(data, onClose): void {\n    const dialogRef = this.dialog.open(InfoDialogComponent, {\n      width: '80%',\n      data: data\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      // console.log('The dialog was closed::', result);\n      if (typeof onClose === 'function') {\n        onClose(result);\n      }\n    });\n  }\n}\n"],"sourceRoot":""}